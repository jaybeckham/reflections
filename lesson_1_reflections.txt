How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The differences between the old file and new file were immediately pointed out. The typo was quickly identified.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    One could easily revert back to a previous version if the new one happens to be too buggy. Minimize downtime.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Automatic commits would lead to potential illogical save points in the code. Manual commits allow one to customizde
    what and how often a commit should be pushed since the process is rather user dependent.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Multiple files in one commit are usually inter related so it is more meaningful to track changes between all
    files cocurrently rather than seperately.

How can you use the commands git log and git diff to view the history of files?

    You use git log to view the history of all the commits which contain an ID per each commit and then you use git diff
to compare the committs (IDs) to see  the differences between the commints, i.e., git diff ID_1 ID_2 

How might using version control make you more confident to make changes that
could break something?

    You could always revert back to a previously working commit and track the bug down that broke the program.

Now that you have your workspace set up, what do you want to try using Git for?

    I'd like to start using git for all future programming courses to implement proper software engineering principles.
