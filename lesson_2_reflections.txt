Jay Beckham

What happens when you initialize a repository? Why do you need to do it?

	it creates a hidden directory called .git which holds information. You need to do it to so that the first commit can be completed.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The statging area hold the files which will be committed at the same time. It allows you to control excactly when and what commits you wish to make.

How can you use the staging area to make sure you have one commit per logical
change?

	You can see the differences between the files in the staging area and on the working directory directly. This ensures you have one major logical change before you commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	You can create a branch when you're working on an experimental feature, for example. Branches would help to keep the main program seperagte from the experimental program until it is ready to be incorporated into the main program.

How do the diagrams help you visualize the branch structure?

	Diagrams help you trace back the parent commit and allow one to map out th reachability of each branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	We merge two branches together to bring in major changes between two branches to create a new "master" branch label. We represent branches with backwards pointing arrows to indicate the "parent" of each branch and to show that two merged branches have two different parents.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Automatic merging is convenient and requires no merge conflict resolution. However, git could potentially include unwanted changes in one branch over another, which is why git lets us manually resolve merge conflicts.
